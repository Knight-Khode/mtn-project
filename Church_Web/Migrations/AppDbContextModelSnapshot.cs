// <auto-generated />
using System;
using Church_Web.Db_Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Church_Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Church_Web.Db_Model.ChildComment", b =>
                {
                    b.Property<int>("ChildCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParentCommentID")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ChildCommentID");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("ChildComments");
                });

            modelBuilder.Entity("Church_Web.Db_Model.Church", b =>
                {
                    b.Property<int>("ChurchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppPassword")
                        .HasColumnType("text");

                    b.Property<string>("AppUser")
                        .HasColumnType("text");

                    b.Property<string>("ChurchAddress")
                        .HasColumnType("text");

                    b.Property<string>("ChurchCounty")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChurchDateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ChurchDetails")
                        .HasColumnType("text");

                    b.Property<string>("ChurchMsisdn")
                        .HasColumnType("text");

                    b.Property<string>("ChurchName")
                        .HasColumnType("text");

                    b.HasKey("ChurchID");

                    b.ToTable("ChurchLists");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ChurchMembers", b =>
                {
                    b.Property<int>("ChurchMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateSubscribe")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ChurchMemberID");

                    b.HasIndex("ChurchId");

                    b.HasIndex("UserId");

                    b.ToTable("ChurchMembers");
                });

            modelBuilder.Entity("Church_Web.Db_Model.EbuCusComments", b =>
                {
                    b.Property<int>("EbuCusCommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("EbuCusCommentsId");

                    b.HasIndex("UserId");

                    b.ToTable("EbuCusComments");
                });

            modelBuilder.Entity("Church_Web.Db_Model.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChurchID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EventID");

                    b.HasIndex("ChurchID");

                    b.ToTable("UpComingEvents");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ParentComment", b =>
                {
                    b.Property<int>("ParentCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CID")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CommentM")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VID")
                        .HasColumnType("text");

                    b.HasKey("ParentCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("ParentComments");
                });

            modelBuilder.Entity("Church_Web.Db_Model.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("text");

                    b.Property<int?>("ChurchMembersChurchMemberID")
                        .HasColumnType("integer");

                    b.Property<string>("ChurchMembersID")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<string>("OPAtransID")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("XReferenceID")
                        .HasColumnType("text");

                    b.HasKey("PaymentID");

                    b.HasIndex("ChurchMembersChurchMemberID");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Church_Web.Db_Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Church_Web.Db_Model.VideoList", b =>
                {
                    b.Property<int>("VideoListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alerts")
                        .HasColumnType("text");

                    b.Property<int>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<string>("ChurchPic")
                        .HasColumnType("text");

                    b.Property<string>("Churchthumbnail")
                        .HasColumnType("text");

                    b.Property<DateTime>("Creationtime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmbedHtml")
                        .HasColumnType("text");

                    b.Property<string>("Lblply")
                        .HasColumnType("text");

                    b.Property<DateTime>("STRMDATE")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("STRMURL")
                        .HasColumnType("text");

                    b.Property<string>("VID")
                        .HasColumnType("text");

                    b.Property<string>("VidStatus")
                        .HasColumnType("text");

                    b.HasKey("VideoListID");

                    b.HasIndex("ChurchId");

                    b.ToTable("VideoLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ChildComment", b =>
                {
                    b.HasOne("Church_Web.Db_Model.ParentComment", "ParentComment")
                        .WithMany("ChildComment")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Church_Web.Db_Model.User", "User")
                        .WithMany("ChildComments")
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ChurchMembers", b =>
                {
                    b.HasOne("Church_Web.Db_Model.Church", "Church")
                        .WithMany("ChurchMembers")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Church_Web.Db_Model.User", "User")
                        .WithMany("ChurchMembers")
                        .HasForeignKey("UserId");

                    b.Navigation("Church");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Church_Web.Db_Model.EbuCusComments", b =>
                {
                    b.HasOne("Church_Web.Db_Model.User", "User")
                        .WithMany("EbuCusComments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Church_Web.Db_Model.Event", b =>
                {
                    b.HasOne("Church_Web.Db_Model.Church", "Church")
                        .WithMany("Events")
                        .HasForeignKey("ChurchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Church");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ParentComment", b =>
                {
                    b.HasOne("Church_Web.Db_Model.User", "User")
                        .WithMany("ParentComment")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Church_Web.Db_Model.Payment", b =>
                {
                    b.HasOne("Church_Web.Db_Model.ChurchMembers", "ChurchMembers")
                        .WithMany("Payments")
                        .HasForeignKey("ChurchMembersChurchMemberID");

                    b.HasOne("Church_Web.Db_Model.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("ChurchMembers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Church_Web.Db_Model.VideoList", b =>
                {
                    b.HasOne("Church_Web.Db_Model.Church", "Church")
                        .WithMany("VideoLists")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Church");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Church_Web.Db_Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Church_Web.Db_Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Church_Web.Db_Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Church_Web.Db_Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Church_Web.Db_Model.Church", b =>
                {
                    b.Navigation("ChurchMembers");

                    b.Navigation("Events");

                    b.Navigation("VideoLists");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ChurchMembers", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Church_Web.Db_Model.ParentComment", b =>
                {
                    b.Navigation("ChildComment");
                });

            modelBuilder.Entity("Church_Web.Db_Model.User", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("ChurchMembers");

                    b.Navigation("EbuCusComments");

                    b.Navigation("ParentComment");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
